{"title":"LLM_LangChain八股文（整理自用_不保证正确）（持续更新）","uid":"33d3a0a2cbefdcf717ea2b53096214d6","slug":"LLM_langchain八股文","date":"2024-04-14T14:21:58.196Z","updated":"2024-04-15T01:52:41.669Z","comments":true,"path":"api/articles/LLM_langchain八股文.json","keywords":null,"cover":"https://raw.githubusercontent.com/hexojs/logo/master/hexo-logo-avatar.png","content":"<h1 id=\"LangChain本身\"><a href=\"#LangChain本身\" class=\"headerlink\" title=\"LangChain本身\"></a>LangChain本身</h1><h2 id=\"什么是-LangChain\"><a href=\"#什么是-LangChain\" class=\"headerlink\" title=\"什么是 LangChain?\"></a>什么是 LangChain?</h2><p>LangChain 是一个开发由语言模型驱动的应用程序的框架。我们相信最强大和不同的应用程序不仅会通过 API 调用语言模型， 还会：</p>\n<p>数据感知 : 将语言模型连接到其他数据源<br>具有代理性质 : 允许语言模型与其环境交互</p>\n<h2 id=\"LangChain-中-Components-and-Chains-是什么？\"><a href=\"#LangChain-中-Components-and-Chains-是什么？\" class=\"headerlink\" title=\"LangChain 中 Components and Chains 是什么？\"></a>LangChain 中 Components and Chains 是什么？</h2><p>Components（组件）</p>\n<p>“Components”在LangChain中指的是单个的、可重用的功能模块，每个组件都是独立的，并执行特定的任务。这些组件可以是预处理文本的工具、执行特定查询的功能、与外部API交互的接口，或者是直接与语言模型交互的部分。组件是高度模块化的，可以在不同的应用中以不同的方式组合使用。</p>\n<p>组件的主要类别包括：</p>\n<p>Language Model Components: 与特定的语言模型交互，如生成文本、回答问题等。<br>Preprocessing Components: 对输入数据进行预处理，如文本清洗、格式化等。<br>Postprocessing Components: 对模型的输出进行后处理，如修正语法错误、过滤不当内容等。<br>Integration Components: 与外部服务或API集成，比如获取外部数据、调用其他AI服务等。</p>\n<p>Chains（链）</p>\n<p>“Chains”是多个组件按照特定的顺序连接起来形成的处理流水线。每个链定义了数据如何从一个组件传递到另一个组件，以及如何在整个应用中流动。链允许开发者将简单的组件组合成复杂的工作流程，无需关心各个组件之间的具体交互细节。</p>\n<p>链的设计使得开发者可以灵活地定义组件之间的数据流向和处理逻辑，实现从数据输入到最终输出的全过程控制。这种方式不仅提高了开发效率，还增强了应用的可维护性和扩展性。</p>\n<h2 id=\"2-2-LangChain-中-Prompt-Templates-and-Values-是什么？\"><a href=\"#2-2-LangChain-中-Prompt-Templates-and-Values-是什么？\" class=\"headerlink\" title=\"2.2 LangChain 中 Prompt Templates and Values 是什么？\"></a>2.2 LangChain 中 Prompt Templates and Values 是什么？</h2><p>在 LangChain 中，Prompt Templates 和 Values 是构建有效的语言模型查询（prompting）过程中的两个关键组件。它们协助在不同的上下文和需求下构造和定制化 prompt 的内容，以便从语言模型中获取最准确和相关的回答或输出。</p>\n<p>Prompt Templates（提示模板）</p>\n<p>Prompt Templates 是预定义的文本模板，用于生成向语言模型提交的完整提示（prompts）。这些模板通常包含占位符（placeholders），它们在实际使用时会被具体的值替换。使用模板的目的是为了确保提示的一致性、可控性和可复用性，同时也使得提示的创建过程更加自动化和规范化。</p>\n<p>模板的设计允许开发者预先定义和优化与语言模型交互的方式，通过精心设计的语言和结构来引导模型生成特定类型的回答或内容。这种方法在需要对模型输出进行精细控制时尤其有用，例如在需要遵循特定格式或风格的应用场景中。</p>\n<p>Values（值）</p>\n<p>Values 是在实际生成 prompt 时填充到 Prompt Templates 中的具体数据或信息。这些值可能来自用户输入、数据库查询结果或任何其他数据源。值的选择和处理是动态进行的，取决于具体的应用场景和需求。</p>\n<p>使用值的目的是使得生成的 prompt 能够针对具体的情况或问题进行定制，提高模型回答的相关性和准确性。例如，在一个为用户提供个性化建议的应用中，每个用户的输入和背景信息都会作为值被用来生成定制的 prompt。</p>\n<p>在 LangChain 中，Example Selectors 是指用于从一个更大的数据集中选择特定实例（例子）以用于构建 prompt 的组件。这一功能在那些需要动态地根据上下文或用户输入来生成具体且相关的提示文本时尤为重要。Example Selectors 通常用于增强提示的相关性和效果，尤其是在那些需要模型考虑多个数据点以做出最佳回答的场景中。</p>\n<p>功能和用途<br>Example Selectors 的主要功能是筛选和选择最适合当前查询需求的数据实例。在处理大量数据或信息时，不可能也不必要将所有数据一次性提供给模型。相反，选择最相关的信息以构建有效的 prompt 是提高模型性能的关键。</p>\n<p>这些选择器可以基于多种标准进行工作，例如：</p>\n<p>相关性：选择与当前查询最相关的实例。<br>最新性：优先选择最新的数据实例。<br>多样性：确保选出的实例在某些特征上具有代表性或多样性。<br>特定规则：基于预设的业务规则或逻辑来选择实例。</p>\n<h2 id=\"LangChain-中-Example-Selectors-是什么？\"><a href=\"#LangChain-中-Example-Selectors-是什么？\" class=\"headerlink\" title=\"LangChain 中 Example Selectors 是什么？\"></a>LangChain 中 Example Selectors 是什么？</h2><p>LangChain 是一个开源的库，用于构建和部署基于语言模型的应用。它提供了一种结构化的方式来整合不同的组件，以创建复杂的语言理解和生成任务。在 LangChain 中，Example Selectors 是一个特定的组件，用于从一组给定的示例中选择最合适的示例来回答用户的问题或完成特定的任务。</p>\n<p>功能和目的<br>Example Selectors 的主要目的是改善语言模型在特定任务上的表现，通过精选最相关的信息或示例来引导模型的输出。这种方法特别有用在处理那些需要基于既有知识或数据进行回答的场景，例如，法律咨询、技术支持或任何专业领域的咨询。</p>\n<h2 id=\"LangChain-中-Output-Parsers-是什么？\"><a href=\"#LangChain-中-Output-Parsers-是什么？\" class=\"headerlink\" title=\"LangChain 中 Output Parsers 是什么？\"></a>LangChain 中 Output Parsers 是什么？</h2><p>在 LangChain 中，Output Parsers 是一个重要的组件，用于处理和解释语言模型生成的输出。这个组件的主要功能是将模型的原始输出转换成结构化的数据或更加具体、易于理解的格式。Output Parsers 在 LangChain 应用中起到了桥接模型输出与最终用户需求的关键作用。</p>\n<p>功能和目的<br>Output Parsers 的核心目的是从模型生成的通常较为自由形式的文本中提取有用信息，并将其转化为更加有序或定制化的格式。这对于实现自动化流程、数据分析、用户交互等多种应用场景非常关键。</p>\n<h2 id=\"LangChain-中-Indexes-and-Retrievers-是什么？\"><a href=\"#LangChain-中-Indexes-and-Retrievers-是什么？\" class=\"headerlink\" title=\"LangChain 中 Indexes and Retrievers 是什么？\"></a>LangChain 中 Indexes and Retrievers 是什么？</h2><p>在 LangChain 中，Indexes and Retrievers 是两个关键组件，它们共同作用于信息检索的环节，帮助从大量的数据中快速准确地找到与用户查询相关的信息。这些组件对于构建基于知识的应用、问答系统等非常重要，因为它们提供了从大数据集中提取信息的能力。</p>\n<p>Indexes（索引）<br>Indexes 是指将数据组织、存储和索引的方式，使得可以高效地检索信息。索引通常涉及数据的预处理，如文本的分词、标准化、向量化等，以便于快速查找。在 LangChain 中，索引可以是简单的关键词索引，也可以是更复杂的向量空间模型，如使用BERT或其他语言模型生成的嵌入向量。</p>\n<h2 id=\"LangChain-中-Chat-Message-History-是什么？\"><a href=\"#LangChain-中-Chat-Message-History-是什么？\" class=\"headerlink\" title=\"LangChain 中 Chat Message History 是什么？\"></a>LangChain 中 Chat Message History 是什么？</h2><p>在 LangChain 中，Chat Message History 是指在创建和管理对话应用时使用的一种机制，用于记录和跟踪与用户之间交互的历史信息。这个组件的功能是保存以前的交流记录，使得在处理当前和未来的用户输入时，模型可以利用这些历史信息来生成更加准确和连贯的回答。</p>\n<p>使用Langchain链式调用</p>\n<p>LLMChain是单个调用 SimpleSequentialChain是多个简单顺序调用 也可以创建自定义链 </p>\n<p>路由链RouterChain</p>\n<p>路由链（RouterChain）用于创建可以动态选择下一条链的链。</p>\n<p>RouterChain 由两个部分组成:</p>\n<p>路由链本身(负责选择下一条链)<br>destination_chains：RouterChain 可以路由到的链<br>RouterChain 的几种类型包括:</p>\n<p>LLMRouterChain：使用一个语言模型来决定如何路由<br>EmbeddingRouterChain：使用嵌入和相似性来路由到不同的链<br>RouterChain 通常与其他链组合使用，比如 MultiPromptChain，可以根据问题动态选择不同的 prompt 来回答问题。</p>\n<p>总之，RouterChain 允许链动态地选择下一步的操作，实现更加智能和灵活的链。它是 Langchain 中实现链组合的重要组件之一。</p>\n<p>转换链（TransformChain）允许在链之间添加自定义的转换函数。</p>\n<p>TransformChain 的主要组成部分是:</p>\n<p>input_variables：输入变量名列表<br>output_variables：输出变量名列表<br>transform：自定义的转换函数</p>\n<p>转换函数接受一个字典作为输入，字典中的键是 input_variables 中定义的变量名。</p>\n<p>转换函数需要返回一个字典，字典中的键是 output_variables 中定义的变量名。</p>\n<p>这样 TransformChain 就可以在链之间添加任意的转换逻辑，如清理、过滤、格式化数据等。</p>\n<p>总之，TransformChain 为在链之间添加自定义转换提供了一种简单的方法，使链之间的数据流更加灵活。</p>\n<p>文档链 DocumentsChain<br>文档链（DocumentsChain）用于将多个文档作为输入传递给下游的链。它可以用来从多个文档中抽取信息、进行问答、总结等任务。</p>\n<p>DocumentsChain 的一些关键特点:</p>\n<p>可以将多个文档合并成一个虚拟的大文档，传递给下游链。<br>支持从文档中抽取关键词，命名实体等信息。<br>可以针对每个文档单独处理，然后合并结果。<br>支持根据文档内容进行路由，选择不同的下游链。<br>可以跟踪每个结果来自哪个文档。<br>支持各种文档格式，如文本、PDF、HTML等。<br>DocumentsChain 通常与问答链、总结链等结合使用,来利用多个文档的信息。它简化了处理多个输入文档的流程。</p>\n<p>总之，DocumentsChain 是 LangChain 中处理多文档输入的重要组件，允许构建更加智能的链式模型。</p>\n<h2 id=\"什么是-LangChain-Agent\"><a href=\"#什么是-LangChain-Agent\" class=\"headerlink\" title=\"什么是 LangChain Agent?\"></a>什么是 LangChain Agent?</h2><p>代理 Agents</p>\n<p>代理（Agents）的核心思想是使用 LLM 作为大脑自动思考，自动决策选择执行不同的动作，最终完成我们的目标任务。</p>\n<p>Agents 模块有几个关键组件：</p>\n<p>代理 Agent</p>\n<p>代理（agent）底层的实现方式是通过 LLM 来决定下一步执行什么动作，从而扮演着我们的代理角色。它可以协助我们做出决策，调用相应的 API，为我们提供高效便捷的服务。</p>\n<p>工具 Tools</p>\n<p>工具（Tools）是代理调用的函数或 API，需要被正确调用并以最有帮助的方式描述，以便代理能够顺利运行。LangChain 提供了广泛的入门工具，但也支持定义自己的工具，包括自定义描述。</p>\n<p>工具集 Toolkits</p>\n<p>工具集（Toolkits）通常提供给LLM的工具不仅仅只有一两个，而是一组可供选择的工具集，这样可以让 LLM 在完成任务时有更多的能力和选择。此外，这些工具集还可能包含完成特定目标所需的工具组合。</p>\n<p>代理执行器 AgentExecutor</p>\n<p>代理执行器（AgentExecutor）是在代理运行时执行的，它的作用是为您处理代理在选择工具时可能遇到的一些问题，比如代理选择不存在的工具或者工具出现错误等情况。此外，代理执行器还可以处理代理生成的输出无法解析为工具调用的情况，并在所有级别（包括代理决策和工具调用）上进行日志记录和可观察性输出。这样可以更好地保证系统的稳定性和可靠性。</p>\n<p>回调 Callbacks</p>\n<p>LangChain 提供了一个回调系统，允许您连接到 LLM 申请的各个阶段。这对于日志记录、监控、流传输和其他任务（添加标签、计算 Token 等）非常有用</p>\n","feature":true,"text":"LangChain本身什么是 LangChain?LangChain 是一个开发由语言模型驱动的应用程序的框架。我们相信最强大和不同的应用程序不仅会通过 API...","permalink":"/post/LLM_langchain八股文","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#LangChain%E6%9C%AC%E8%BA%AB\"><span class=\"toc-text\">LangChain本身</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-LangChain\"><span class=\"toc-text\">什么是 LangChain?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LangChain-%E4%B8%AD-Components-and-Chains-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">LangChain 中 Components and Chains 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-LangChain-%E4%B8%AD-Prompt-Templates-and-Values-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.2 LangChain 中 Prompt Templates and Values 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LangChain-%E4%B8%AD-Example-Selectors-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">LangChain 中 Example Selectors 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LangChain-%E4%B8%AD-Output-Parsers-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">LangChain 中 Output Parsers 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LangChain-%E4%B8%AD-Indexes-and-Retrievers-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">LangChain 中 Indexes and Retrievers 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LangChain-%E4%B8%AD-Chat-Message-History-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">LangChain 中 Chat Message History 是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-LangChain-Agent\"><span class=\"toc-text\">什么是 LangChain Agent?</span></a></li></ol></li></ol>","author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"CodeQL相关论文整理(持续更新中)","uid":"da5f341d43fdcb48713cf189ba6fcbc4","slug":"CodeQL相关论文整理","date":"2024-04-24T13:25:17.132Z","updated":"2024-04-25T01:47:41.509Z","comments":true,"path":"api/articles/CodeQL相关论文整理.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.1qC9gL83V6TVXwAXmyQj8QHaHa?rs=1&pid=ImgDetMain","text":"前排提醒，本文中与codeql相关的论文为按照时间线整理，数据来源为：https://codeql.github.com/publications/ 论文整理仅...","permalink":"/post/CodeQL相关论文整理","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"LLM八股文（整理自用_不保证正确）（持续更新）","uid":"542f169762b7aca64f020ec0392added","slug":"LLM八股文（整理自用_不保证正确）","date":"2024-04-12T11:40:39.386Z","updated":"2024-04-15T00:34:47.121Z","comments":true,"path":"api/articles/LLM八股文（整理自用_不保证正确）.json","keywords":null,"cover":"https://raw.githubusercontent.com/hexojs/logo/master/hexo-logo-avatar.png","text":"Attention改进方面Flash_Attention（这一部分主要参考链接：https://readpaper.feishu.cn/docx/AC7JdtL...","permalink":"/post/LLM八股文（整理自用_不保证正确）","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}