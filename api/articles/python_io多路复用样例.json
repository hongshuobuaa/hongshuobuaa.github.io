{"title":"python和协程进行IO多路复用的例子","uid":"255c3f38c555c61c61771065e0b22e41","slug":"python_io多路复用样例","date":"2024-04-27T14:05:40.900Z","updated":"2024-04-27T14:06:31.480Z","comments":true,"path":"api/articles/python_io多路复用样例.json","keywords":null,"cover":null,"content":"<p>使用Python进行IO多路复用的一个常见方法是使用<code>asyncio</code>库，这是Python中用于编写单线程并发代码的库，底层使用<code>selectors</code>模块实现IO多路复用。以下是一个简单的例子，展示了如何使用<code>asyncio</code>和协程来同时处理多个IO操作。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> asyncio</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">say_after</span>(<span class=\"params\">delay, what</span>):</span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.sleep(delay)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(what)</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;started at <span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 创建两个协程</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> asyncio.gather(</span><br><span class=\"line\">        say_after(<span class=\"number\">1</span>, <span class=\"string\">&#x27;hello&#x27;</span>),</span><br><span class=\"line\">        say_after(<span class=\"number\">2</span>, <span class=\"string\">&#x27;world&#x27;</span>)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;finished at <span class=\"subst\">&#123;time.strftime(<span class=\"string\">&#x27;%X&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class=\"line\">asyncio.run(main())</span><br></pre></td></tr></table></figure>\n<p>在这个例子中，<code>main</code>函数是使用<code>async</code>定义的异步函数，它调用<code>asyncio.gather</code>来同时运行两个<code>say_after</code>协程。这两个协程分别等待1秒和2秒，然后打印一条消息。<code>asyncio.run(main())</code>启动事件循环，并运行<code>main</code>协程直到完成。<br><code>asyncio.sleep</code>函数是一个协程，它会挂起当前任务，但不会阻塞事件循环，这样事件循环就可以在等待期间执行其他任务。<br>请注意，为了确保代码能在所有Python版本中运行，上面的例子假设你已经导入了<code>time</code>模块，并且在你的环境中<code>asyncio.run</code>是可用的（它在Python 3.7及以后版本中可用）。<br>这个例子演示了<code>asyncio</code>如何实现并发行为，而无需使用多线程或多进程。这种方式在IO密集型应用中特别有用，因为它允许你以单线程的方式处理多个IO操作，从而减少了上下文切换的开销。</p>\n","feature":true,"text":"使用Python进行IO多路复用的一个常见方法是使用asyncio库，这是Python中用于编写单线程并发代码的库，底层使用selectors模块实现IO多路复...","permalink":"/post/python_io多路复用样例","photos":[],"count_time":{"symbolsCount":916,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"CodeQL相关论文整理(持续更新中)","uid":"da5f341d43fdcb48713cf189ba6fcbc4","slug":"CodeQL相关论文整理","date":"2024-04-24T13:25:17.132Z","updated":"2024-04-25T01:47:41.509Z","comments":true,"path":"api/articles/CodeQL相关论文整理.json","keywords":null,"cover":"https://tse1-mm.cn.bing.net/th/id/OIP-C.1qC9gL83V6TVXwAXmyQj8QHaHa?rs=1&pid=ImgDetMain","text":"前排提醒，本文中与codeql相关的论文为按照时间线整理，数据来源为：https://codeql.github.com/publications/ 论文整理仅...","permalink":"/post/CodeQL相关论文整理","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}