{"title":"2024_3_29记录(秒凉)","uid":"80a7e21722935a33527e2b073eb00486","slug":"2024_3_29记录(秒挂)","date":"2024-03-30T08:46:44.216Z","updated":"2024-03-30T09:32:42.435Z","comments":true,"path":"api/articles/2024_3_29记录(秒挂).json","keywords":null,"cover":[],"content":"<h1 id=\"第一题-c-java-基础题\"><a href=\"#第一题-c-java-基础题\" class=\"headerlink\" title=\"第一题 c++,java 基础题\"></a>第一题 c++,java 基础题</h1><p>脑抽答错了，记得多nk的计算机基础</p>\n<h1 id=\"第二题-编译型和非编译型SAST的区别\"><a href=\"#第二题-编译型和非编译型SAST的区别\" class=\"headerlink\" title=\"第二题 编译型和非编译型SAST的区别\"></a>第二题 编译型和非编译型SAST的区别</h1><p>答的不是很好，以下是glm4给出的答案</p>\n<p>编译型静态应用程序安全测试（SAST）和非编译型静态应用程序安全测试（SAST）是两种不同的安全测试方法，它们在应用程序的安全评估过程中有不同的应用场景和特点。</p>\n<ol>\n<li>编译型SAST：<ul>\n<li>编译型SAST工具在编译阶段对源代码进行分析，它需要访问应用程序的源代码。</li>\n<li>这些工具通常可以识别代码中的安全漏洞，如缓冲区溢出、SQL注入等。</li>\n<li>编译型SAST工具可以提供更精确和深入的安全分析，因为它们可以理解代码的结构和逻辑。</li>\n<li>编译型SAST工具通常需要更多的配置和设置，以便正确地集成到开发过程中。</li>\n</ul>\n</li>\n<li>非编译型SAST：<ul>\n<li>非编译型SAST工具在源代码或字节码上进行操作，不需要编译过程。</li>\n<li>这些工具通常可以检测到源代码中的安全漏洞，如跨站脚本攻击（XSS）、跨站请求伪造（CSRF）等。</li>\n<li>非编译型SAST工具通常更容易集成到开发过程中，因为它们不需要编译步骤。</li>\n<li>非编译型SAST工具可能不如编译型工具那样精确，因为它们不能完全理解代码的结构和逻辑。<br>总的来说，编译型和非编译型SAST工具都有其优缺点，选择哪种工具取决于具体的安全需求和开发环境。在实际应用中，可以将这两种工具结合使用，以获得更全面的安全评估。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"拓展：SAST，DAST和IAST到底是什么？他们之间的优劣势如何？（转载自https-zhuanlan-zhihu-com-p-98007493；作者：DevOps安全社）\"><a href=\"#拓展：SAST，DAST和IAST到底是什么？他们之间的优劣势如何？（转载自https-zhuanlan-zhihu-com-p-98007493；作者：DevOps安全社）\" class=\"headerlink\" title=\"拓展：SAST，DAST和IAST到底是什么？他们之间的优劣势如何？（转载自https://zhuanlan.zhihu.com/p/98007493；作者：DevOps安全社）\"></a>拓展：SAST，DAST和IAST到底是什么？他们之间的优劣势如何？（转载自<a href=\"https://zhuanlan.zhihu.com/p/98007493%EF%BC%9B%E4%BD%9C%E8%80%85%EF%BC%9ADevOps%E5%AE%89%E5%85%A8%E7%A4%BE%EF%BC%89\">https://zhuanlan.zhihu.com/p/98007493；作者：DevOps安全社）</a></h2><p>一、SAST</p>\n<p>SAST（Static Application Security Testing，静态应用程序安全测试）对应用程序源代码执行直接的白盒分析。分析是在代码的静态视图上运行的，这意味着代码在审查时没有运行。如今，SAST已经完全成为主流，并且在整个软件行业中被广泛采用。</p>\n<p>SAST的优点：</p>\n<p>广泛的编程语言支持；</p>\n<p>检出率较高；</p>\n<p>可以定位到代码行。</p>\n<p>SAST的缺点：</p>\n<p>准确性差：优秀SAST产品的误报率也在53%以上*；</p>\n<p>无法看到执行流；</p>\n<p>通常需要一些定制或调参；</p>\n<p>不适用于生产阶段的系统；</p>\n<p>通常运行很慢。</p>\n<p>二、DAST</p>\n<p>与SAST相反，DAST（Dynamic Application Security Testing，动态应用程序安全测试）对应用程序进行黑盒分析，这意味着它们不能访问代码或实现细节。DAST只检查系统对潜在漏洞测试的请求和响应。换言之，DAST是外部的漏洞扫描程序。</p>\n<p>DAST的优点：</p>\n<p>独立于应用程序的技术和平台，无需代码细节；</p>\n<p>执行相对较快；</p>\n<p>误报率较低。</p>\n<p>DAST的缺点：</p>\n<p>检出率低：优秀的DAST产品检出率也只有18%*；</p>\n<p>无法定位到代码行；</p>\n<p>使用门槛高，报告通常需要安全专家解读。</p>\n<p>三、IAST</p>\n<p>IAST（Interactive Application Security Testing，交互式应用程序安全测试）结合了SAST和DAST的优点。IAST可以像SAST一样看到源代码，也可以像DAST一样看到应用程序运行时的执行流。</p>\n<p>IAST的优点：</p>\n<p>检出率较高；</p>\n<p>误报率较低；</p>\n<p>可以在研发测试和生产环境中使用；</p>\n<p>实时产生结果；</p>\n<p>可以持续检测，对DevOps支持度更高；</p>\n<p>即插即用，无需配置或调参；</p>\n<p>可以与CI平台集成，创建相互连接的工作流。</p>\n<p>IAST的缺点：</p>\n<p>需要特定的语言支持</p>\n<p><img src=\"/image.png\" alt=\"alt text\"></p>\n<h2 id=\"第三题-IDE为何可以在用户编写代码而未运行时报出错误提示；\"><a href=\"#第三题-IDE为何可以在用户编写代码而未运行时报出错误提示；\" class=\"headerlink\" title=\"第三题 IDE为何可以在用户编写代码而未运行时报出错误提示；\"></a>第三题 IDE为何可以在用户编写代码而未运行时报出错误提示；</h2><p>基本上答出来，但太拘泥于细节。</p>\n<p>规则和模式匹配：静态分析工具通常基于一系列预定义的规则和模式来检查代码。这些规则可以是关于代码风格、编程语言的语法、可能的错误或安全漏洞的。工具会扫描代码，寻找与这些规则匹配的模式，并标记出潜在的问题。<br>代码质量检查：静态分析工具可以检测代码中的质量问题，如重复的代码、过于复杂的函数、过长的文件、循环依赖等。这些质量问题可能会影响代码的可维护性和可读性。<br>错误检测：工具可以识别可能导致运行时错误的代码，如空指针引用、数组越界访问、除以零等。通过在开发早期发现这些错误，可以减少调试和修复错误的时间。<br>安全漏洞扫描：静态分析工具可以检查代码中可能的安全漏洞，如SQL注入、跨站脚本（XSS）、缓冲区溢出等。这些漏洞可能会被攻击者利用，导致安全风险。</p>\n<h2 id=\"第四题-codeql是否可以被修改未无需编译的工具\"><a href=\"#第四题-codeql是否可以被修改未无需编译的工具\" class=\"headerlink\" title=\"第四题 codeql是否可以被修改未无需编译的工具\"></a>第四题 codeql是否可以被修改未无需编译的工具</h2><p>回答组织错乱，以下是我重新组织的回答（不保证正确）</p>\n<p>如果是从原理上来说，codeql本身对特定语言（Python,js等）无需编译，其仅仅倾向于使用编译的方法来获取更多信息，因此codeql可以被修改为无需编译的工具，以JAVA为例，codeql在提取其AST时将其分为stmt.表达式，Map类型等，这些信息都可以使用非编译的工具来提取。但不用编译的方法来提取这些信息，相较于编译方法而言准确度会降低。这就是为什么codeql尽量使用编译的原因。</p>\n<h2 id=\"第五题-了解哪些类型的漏洞\"><a href=\"#第五题-了解哪些类型的漏洞\" class=\"headerlink\" title=\"第五题 了解哪些类型的漏洞\"></a>第五题 了解哪些类型的漏洞</h2><p>建议参照OWASP Top10来回答，2021版本为：</p>\n<p>A01:2021-权限控制失效 从第五名移上來; 94% 被测试的应用程式都有验证到某种类别权限控制失效的问题。在权限控制失效这个类别中被对应到的 34 个 CWEs 在验测资料中出现的次数都高于其他的弱点类别。</p>\n<p>A02:2021-加密机制失效 提升一名到第二名，在之前为 敏感资料外曝，在此定义下比较类似于一个广泛的问题而非根本原因。在此重新定义并将问题核心定义在加密机制的失败，并因此造成敏感性资料外泄或是系統被破坏。</p>\n<p>A03:2021-注入式攻击 下滑到第三名。94% 被测试的应用程式都有验测到某种类別注入式攻击的问题。在注入式攻击这个类別中被对应到的 33 个 CWEs 在验测资料中出现的次数为弱点问题的第二高。跨站脚本攻击现在在新版本属于这个类別。</p>\n<p>A04:2021-不安全设计 这是 2021 年版本的新类別，并特別聚焦在设计相关的缺陷。如果我们真的希望让整个产业”向左移动”＊注一＊，那我们必须进一步的往威胁建模，安全设计模块的观念，和安全參考架构前进。</p>\n<p>＊注一: Move Left 于英文原文中代表在软件开发及交付过程中，在早期找出及处理相关问题，同 Shift Left Testing。＊</p>\n<p>A05:2021-安全设定缺陷 从上一版本的第六名移动上來。90% 被测试的应用程式都有验测到某种类別的安全设定缺陷。在更多的软件往更高度和有弹性的设定移动，我们并不意外这个类別的问题往上移动。在前版本中的 XML 外部实体注入攻击 （XML External Entities）现在属于这个类別。</p>\n<p>A06:2021-危险或过旧的组件 在之前标题为 使用有已知弱点的组件。在本次版本中于业界问卷中排名第二，但也有足够的统计资料让它可以进入 Top 10。这个类別从 2017 版本的第九名爬升到第六，也是我们持续挣扎做测试和评估风险的类別。这也是唯一一个沒有任何 CVE 能被对应到 CWE 內的类別，所以预设的威胁及影响权重在这类別的分数上被预设为 5.0。</p>\n<p>A07:2021-认证及验证机制失效 在之前标题为 错误的认证机制。在本次版本中由第二名下滑至此，并同时包含了将认证相关缺失的 CWE 包含在內。这个类別仍是 Top 10 不可缺少的一环，但同时也有发现现在标准化的架构有协助降低次风险发生机率。</p>\n<p>A08:2021-软件及资料完整性失效 这是 2021 年版本全新的类別，并在软件更新，敏感及重要资料，和 CI&#x2F;CD 管道中并沒有做完整性的确认为前提做假设并进行评估。在评估中影响权重最高分的 CVE&#x2F;CVSS 资料都与这类別中的 10 个 CWE 对应到。2017 年版本中不安全的反序列化现在被合并至此类別。</p>\n<p>A09:2021-安全记录及监控失效 在之前为不完整的记录及监控并纳入在业界问卷中在本次列名为第三名并从之前的第十名上移。这个类別将扩充去纳入更多相关的缺失，但这也是相当难去验证，并沒有相当多的 CVE&#x2F;CVSS 资料可以佐证。但是在这个类別中的缺失会直接影响到整体安全的可视性，事件告警及取证。</p>\n<p>A10:2021-服务器端请求伪造 这个类別是在业界问卷排名第一名，并在此版本內纳入。由资料显示此问题有较低被验测次数和范围，但有高于平均的威胁及影响权重比率。这个类別的出现也是因为业界专家重复申明这类別的问题相当重要，即使在本次资料中并沒有足够的资料去显示这个问题。</p>\n<h2 id=\"第六题-污点分析：\"><a href=\"#第六题-污点分析：\" class=\"headerlink\" title=\"第六题 污点分析：\"></a>第六题 污点分析：</h2><p><img src=\"https://cdn.nlark.com/yuque/0/2021/png/12836676/1629970202711-dae90db2-a837-4854-83ea-a4fd110c7c37.png?x-oss-process=image/format,webp/resize,w_958,limit_0\" alt=\"alt text\"></p>\n<hr>\n<hr>\n<p>2024年3月30日更新：</p>\n<p>发现问过的问题很多来源于<br><a href=\"https://security.tencent.com/index.php/blog/msg/191\">https://security.tencent.com/index.php/blog/msg/191</a><br>只能说之后最好多看相关博客，哭笑不得了属于是</p>\n","feature":false,"text":"第一题 c++,java 基础题脑抽答错了，记得多nk的计算机基础 第二题 编译型和非编译型SAST的区别答的不是很好，以下是glm4给出的答案 编译型静态应用...","permalink":"/post/2024_3_29记录(秒挂)","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E9%A2%98-c-java-%E5%9F%BA%E7%A1%80%E9%A2%98\"><span class=\"toc-text\">第一题 c++,java 基础题</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E9%A2%98-%E7%BC%96%E8%AF%91%E5%9E%8B%E5%92%8C%E9%9D%9E%E7%BC%96%E8%AF%91%E5%9E%8BSAST%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">第二题 编译型和非编译型SAST的区别</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E5%B1%95%EF%BC%9ASAST%EF%BC%8CDAST%E5%92%8CIAST%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F%E4%BB%96%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%98%E5%8A%A3%E5%8A%BF%E5%A6%82%E4%BD%95%EF%BC%9F%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AAhttps-zhuanlan-zhihu-com-p-98007493%EF%BC%9B%E4%BD%9C%E8%80%85%EF%BC%9ADevOps%E5%AE%89%E5%85%A8%E7%A4%BE%EF%BC%89\"><span class=\"toc-text\">拓展：SAST，DAST和IAST到底是什么？他们之间的优劣势如何？（转载自https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;98007493；作者：DevOps安全社）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E9%A2%98-IDE%E4%B8%BA%E4%BD%95%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%94%A8%E6%88%B7%E7%BC%96%E5%86%99%E4%BB%A3%E7%A0%81%E8%80%8C%E6%9C%AA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8A%A5%E5%87%BA%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%EF%BC%9B\"><span class=\"toc-text\">第三题 IDE为何可以在用户编写代码而未运行时报出错误提示；</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%9B%9B%E9%A2%98-codeql%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BF%AE%E6%94%B9%E6%9C%AA%E6%97%A0%E9%9C%80%E7%BC%96%E8%AF%91%E7%9A%84%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">第四题 codeql是否可以被修改未无需编译的工具</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%94%E9%A2%98-%E4%BA%86%E8%A7%A3%E5%93%AA%E4%BA%9B%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">第五题 了解哪些类型的漏洞</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E5%85%AD%E9%A2%98-%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">第六题 污点分析：</span></a></li></ol></li></ol>","author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"leetcode刷题核心点记录","uid":"7be461416c2d0f0593235527ffa02f82","slug":"leetcode_核心点记录","date":"2024-03-30T11:38:46.466Z","updated":"2024-03-30T11:56:43.460Z","comments":true,"path":"api/articles/leetcode_核心点记录.json","keywords":null,"cover":null,"text":"leetcode 470 用 Rand7() 实现 Rand10()已知 rand_N() 可以等概率的生成[1, N]范围的随机数那么：(rand_X() -...","permalink":"/post/leetcode_核心点记录","photos":[],"count_time":{"symbolsCount":231,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false},"next_post":{"title":".vscode出现fail_to_download_vs_code_server解决办法（转载）","uid":"2c99110fb374d2251c5f6902cacac226","slug":"vscode出现fail_to_download_vs_code_server解决办法","date":"2024-03-25T13:27:56.055Z","updated":"2024-03-25T13:27:56.055Z","comments":true,"path":"api/articles/vscode出现fail_to_download_vs_code_server解决办法.json","keywords":null,"cover":"https://raw.githubusercontent.com/hexojs/logo/master/hexo-logo-avatar.png","text":"查看失败日志，锁定commit id到外网环境下载：curl -sSL “https://update.code.visualstudio.com/commit...","permalink":"/post/vscode出现fail_to_download_vs_code_server解决办法","photos":[],"count_time":{"symbolsCount":386,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Shuo Hong","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/65355046?v=4","link":"/","description":"你好，我是来自北京航空航天大学的洪硕","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":false}}